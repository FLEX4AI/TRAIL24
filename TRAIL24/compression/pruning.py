"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/04_compression.pruning.ipynb.

# %% auto 0
__all__ = ['get_ignored_layers', 'adjust_layer_features', 'prune_model']

# %% ../../nbs/04_compression.pruning.ipynb 3
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch_pruning as tp
from torch_pruning.pruner import function
from fasterai.core.all import *

import onnx
import onnxruntime as ort
from onnxruntime import quantization

import numpy as np
import pickle
from itertools import cycle
from fastcore.basics import store_attr, listify, true
from fasterbench.benchmark import *

# %% ../../nbs/04_compression.pruning.ipynb 4
def get_ignored_layers(model):
    ignored_layers = []

    # Check and process trend blocks if they exist
    if hasattr(model.ts_model, 'trend_blocks'):
        for block in model.ts_model.trend_blocks:
            if hasattr(block, 'backcast_fc'):
                ignored_layers.append(block.backcast_fc)
            if hasattr(block, 'forecast_fc'):
                ignored_layers.append(block.forecast_fc)

    # Check and process seasonality blocks if they exist
    if hasattr(model.ts_model, 'seasonality_blocks'):
        for block in model.ts_model.seasonality_blocks:
            if hasattr(block, 'backcast_fc'):
                ignored_layers.append(block.backcast_fc)
            if hasattr(block, 'forecast_fc'):
                ignored_layers.append(block.forecast_fc)

    return ignored_layers

# %% ../../nbs/04_compression.pruning.ipynb 5
def adjust_layer_features(layer, pruning_ratio):
    if hasattr(layer, 'in_features') and hasattr(layer, 'weight'):
        in_features = layer.in_features
        layer.in_features = int(in_features * (1-pruning_ratio))
        local_scores = large_final(layer, 'column')
        threshold = torch.quantile(local_scores.view(-1), pruning_ratio)
        mask = local_scores.ge(threshold).to(dtype=local_scores.dtype)
        ixs = torch.nonzero(mask[0] == 1, as_tuple=True)[0]
        layer.weight.data = layer.weight[:, ixs]

# %% ../../nbs/04_compression.pruning.ipynb 6
def prune_model(model, pruning_ratio, dummy_input):
    imp = tp.importance.GroupNormImportance(p=2)
    ignored_layers = get_ignored_layers(model)

    pruner = tp.pruner.MetaPruner(
        model.ts_model,
        dummy_input,
        importance=imp,
        pruning_ratio=pruning_ratio, 
        ignored_layers=ignored_layers
    )
    pruner.step()
    
    if hasattr(model.ts_model, 'trend_blocks'):
        for block in model.ts_model.trend_blocks:
            for layer in [block.backcast_fc, block.forecast_fc]:
                if layer is not None and layer.in_features != int(num_hidden*(1-pruning_ratio)):
                    adjust_layer_features(layer, pruning_ratio)

    if hasattr(model.ts_model, 'seasonality_blocks'):
        for block in model.ts_model.seasonality_blocks:
            for layer in [block.backcast_fc, block.forecast_fc]:
                if layer is not None and layer.in_features != int(num_hidden*(1-pruning_ratio)):
                    adjust_layer_features(layer, pruning_ratio)
